from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.utils import executor
import os
import requests
import json

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def welcome(message: Message):
    await message.reply("ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏™‡πà‡∏á /buy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠ iPhone")

@dp.message_handler(commands=['buy'])
async def handle_buy(message: Message):
    await message.reply("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ iPhone... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")
    try:
        # Prepare the task data from the trigger template
        with open('../scripts/trigger_template.json', 'r', encoding='utf-8') as f:
            task_data = json.load(f)

        # Call the backend API
        api_url = "http://backend:8000/api/run_purchase"
        response = requests.post(api_url, json=task_data, timeout=300) # 5 minutes timeout
        response.raise_for_status()  # Raise an exception for bad status codes

        result = response.json()
        await message.reply(f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ```{json.dumps(result, indent=2)}```")

    except requests.exceptions.RequestException as e:
        await message.reply(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Backend: {e}")
    except (IOError, json.JSONDecodeError) as e:
        await message.reply(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå task: {e}")
    except BaseException:
        await message.reply("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
